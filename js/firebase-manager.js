// Sistema de Diagn√≥stico y Guardado Firebase
class FirebaseManager {
    constructor() {
        this.isReady = false;
        this.database = null;
        this.connectionStatus = false;
        this.init();
    }
    
    init() {
        console.log('üîç Iniciando diagn√≥stico Firebase...');
        
        // Verificar si Firebase est√° cargado
        if (typeof firebase === 'undefined') {
            console.error('‚ùå Firebase SDK no est√° cargado');
            return;
        }
        
        console.log('‚úÖ Firebase SDK cargado');
        
        // Verificar si est√° inicializado
        if (firebase.apps.length === 0) {
            console.error('‚ùå Firebase no est√° inicializado');
            return;
        }
        
        console.log('‚úÖ Firebase inicializado');
        
        // Inicializar Database
        try {
            this.database = firebase.database();
            this.isReady = true;
            console.log('‚úÖ Database conectada');
            
            // Monitorear conexi√≥n
            this.database.ref('.info/connected').on('value', (snapshot) => {
                this.connectionStatus = snapshot.val() === true;
                console.log(`üî• Estado conexi√≥n: ${this.connectionStatus ? 'CONECTADO' : 'DESCONECTADO'}`);
            });
            
        } catch (error) {
            console.error('‚ùå Error conectando Database:', error);
        }
    }
    
    // Guardar datos de p√°gina
    savePage(pageData) {
        return new Promise((resolve, reject) => {
            if (!this.isReady || !this.connectionStatus) {
                reject(new Error('Firebase no est√° disponible'));
                return;
            }
            
            const saveData = {
                ...pageData,
                timestamp: firebase.database.ServerValue.TIMESTAMP,
                saved_at: new Date().toISOString()
            };
            
            this.database.ref('page-edits').push(saveData)
                .then((ref) => {
                    console.log('‚úÖ Guardado en Firebase:', ref.key);
                    resolve(ref.key);
                })
                .catch((error) => {
                    console.error('‚ùå Error guardando:', error);
                    reject(error);
                });
        });
    }
    
    // Guardar mensaje de contacto
    saveContact(contactData) {
        return new Promise((resolve, reject) => {
            if (!this.isReady || !this.connectionStatus) {
                reject(new Error('Firebase no est√° disponible'));
                return;
            }
            
            const saveData = {
                ...contactData,
                timestamp: firebase.database.ServerValue.TIMESTAMP,
                received_at: new Date().toISOString()
            };
            
            this.database.ref('contact-messages').push(saveData)
                .then((ref) => {
                    console.log('‚úÖ Mensaje guardado:', ref.key);
                    resolve(ref.key);
                })
                .catch((error) => {
                    console.error('‚ùå Error guardando mensaje:', error);
                    reject(error);
                });
        });
    }
    
    // Obtener datos guardados
    getPageData() {
        return new Promise((resolve, reject) => {
            if (!this.isReady || !this.connectionStatus) {
                reject(new Error('Firebase no est√° disponible'));
                return;
            }
            
            this.database.ref('page-edits').orderByChild('timestamp').limitToLast(10).once('value')
                .then((snapshot) => {
                    const data = snapshot.val();
                    console.log('üìÑ Datos recuperados:', data);
                    resolve(data);
                })
                .catch((error) => {
                    console.error('‚ùå Error recuperando datos:', error);
                    reject(error);
                });
        });
    }
    
    // Test de conectividad
    testConnection() {
        return new Promise((resolve, reject) => {
            if (!this.isReady) {
                reject(new Error('Firebase no est√° inicializado'));
                return;
            }
            
            const testData = {
                test: 'connection_test',
                timestamp: Date.now()
            };
            
            this.database.ref('test-connection').set(testData)
                .then(() => {
                    console.log('‚úÖ Test de conexi√≥n exitoso');
                    resolve(true);
                })
                .catch((error) => {
                    console.error('‚ùå Test de conexi√≥n fallido:', error);
                    reject(error);
                });
        });
    }
    
    // Obtener estado
    getStatus() {
        return {
            isReady: this.isReady,
            connectionStatus: this.connectionStatus,
            hasDatabase: this.database !== null
        };
    }
}

// Inicializar manager cuando el DOM est√© listo
let firebaseManager;
document.addEventListener('DOMContentLoaded', () => {
    // Esperar un poco para que Firebase se inicialice
    setTimeout(() => {
        firebaseManager = new FirebaseManager();
        
        // Hacer disponible globalmente
        window.firebaseManager = firebaseManager;
        
        // Test autom√°tico despu√©s de 2 segundos
        setTimeout(() => {
            firebaseManager.testConnection()
                .then(() => {
                    console.log('üéâ Sistema Firebase listo para usar');
                })
                .catch((error) => {
                    console.warn('‚ö†Ô∏è Firebase no disponible:', error.message);
                });
        }, 2000);
    }, 1000);
});
